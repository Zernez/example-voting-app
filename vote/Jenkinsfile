pipeline {

agent none

stages{

stage('build'){
when {
changeset "**/vote/**"
}
agent{
docker{
image 'python:2.7.16-slim'
args '--user root'
}
}
steps{
echo 'Compiling vote app'
dir('vote'){
sh 'pip install -i requirements.txt'
}
}
}

stage('test'){
when {
changeset "**/vote/**"
}
agent{
docker{
image 'python:2.7.16-slim'
args '--user root'
}
}
steps{
echo 'Running Unit Tests on vote app'
dir ('vote'){
sh 'nosetests -v'
}
}
}

stage('docker-package'){          
agent any          
when{            
changeset "**/vote/**"            
branch 'master'          
}          
steps{            
echo 'Packaging vote app with docker'            
script{              
docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') 
{                  
def workerImage = docker.build("kernetix/vote:v${env.BUILD_ID}", "./vote")                  
workerImage.push()                  
workerImage.push("${env.BRANCH_NAME}")                  
workerImage.push("latest")              
}            
}          
}      
}
}

 post{
 always{
 echo 'Building multibranch pipeline for vote is completed..'
 }
 failure{
 slackSend (channel: "instavote-cd", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
 }
 success{
 slackSend (channel: "instavote-cd", message: "Build Succeeded and OK - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
 }
 }
}
